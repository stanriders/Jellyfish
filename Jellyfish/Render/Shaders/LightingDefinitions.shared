#define MAX_LIGHTS 16
#define CSM_CASCADES 4
#define MAX_SHADOWS 16
#define SUN_SAMPLER_BINDING 6
//#define CSM_DEBUG

const float PI = 3.14159265359;

layout(binding=SUN_SAMPLER_BINDING) uniform sampler2D sunShadowSampler[CSM_CASCADES];
layout(binding=SUN_SAMPLER_BINDING + CSM_CASCADES + 1) uniform sampler2D shadowSamplers[MAX_LIGHTS];

uniform int lightSourcesCount;
uniform bool sunEnabled;

struct Light {
    vec3 position;    float _pad0;
    vec3 direction;    float _pad1;
    mat4 lightSpaceMatrix;

    int type;
    float constant;
    float linear;
    float quadratic;

    float cone;
    float outcone;
    float brightness;
    bool hasShadows;

    vec3 ambient;    float _pad2;
    vec3 diffuse;    float _pad3;

    float near;
    float far;
    bool usePcss;    float _pad4;
};

struct Sun {
    vec3 direction;  float _pad0;

    mat4 lightSpaceMatrix[CSM_CASCADES];

    vec3 ambient;    float _pad1;
    vec3 diffuse;    float _pad2;

    float brightness;
    bool   hasShadows;
    bool   usePcss;   int _pad3;

    int cascadeFar[CSM_CASCADES];
    int cascadeNear[CSM_CASCADES];
};

layout(std430, binding = 0) buffer LightSources {
    Light lightSources[MAX_LIGHTS];
    Sun   sun;
};

struct LightContrib {
    vec3 ambient;
    vec3 direct;
};

#define PCSS_FILTER_SIZE 16
const vec2 poissonDisk[PCSS_FILTER_SIZE] = 
{
        vec2( -0.94201624, -0.39906216 ),
        vec2( 0.94558609, -0.76890725 ),
        vec2( -0.094184101, -0.92938870 ),
        vec2( 0.34495938, 0.29387760 ),
        vec2( -0.91588581, 0.45771432 ),
        vec2( -0.81544232, -0.87912464 ),
        vec2( -0.38277543, 0.27676845 ),
        vec2( 0.97484398, 0.75648379 ),
        vec2( 0.44323325, -0.97511554 ),
        vec2( 0.53742981, -0.47373420 ),
        vec2( -0.26496911, -0.41893023 ),
        vec2( 0.79197514, 0.19090188 ),
        vec2( -0.24188840, 0.99706507 ),
        vec2( -0.81409955, 0.91437590 ),
        vec2( 0.19984126, 0.78641367 ),
        vec2( 0.14383161, -0.14100790 )
};
